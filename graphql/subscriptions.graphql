# this is an auto generated file. This will be overwritten
subscription OnCreateInstitution(
  $filter: ModelSubscriptionInstitutionFilterInput
  $admin: String
) {
  onCreateInstitution(filter: $filter, admin: $admin) {
    name
    location
    pageUrl
    campusMapUrl
    openingTime
    closingTime
    minimumDuration
    lectureremails
    coursecodes
    domains
    admin {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      id
      createdAt
      updatedAt
      adminInstitutionId
      owner
    }
    courses {
      items {
        coursecode
        coursename
        semester
        id
        createdAt
        updatedAt
        institutionCoursesId
      }
      nextToken
    }
    students {
      items {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        institutionStudentsId
        studentInstitutionId
        owner
      }
      nextToken
    }
    lecturer {
      items {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        institutionLecturerId
        owner
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionAdminId
  }
}
subscription OnUpdateInstitution(
  $filter: ModelSubscriptionInstitutionFilterInput
  $admin: String
) {
  onUpdateInstitution(filter: $filter, admin: $admin) {
    name
    location
    pageUrl
    campusMapUrl
    openingTime
    closingTime
    minimumDuration
    lectureremails
    coursecodes
    domains
    admin {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      id
      createdAt
      updatedAt
      adminInstitutionId
      owner
    }
    courses {
      items {
        coursecode
        coursename
        semester
        id
        createdAt
        updatedAt
        institutionCoursesId
      }
      nextToken
    }
    students {
      items {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        institutionStudentsId
        studentInstitutionId
        owner
      }
      nextToken
    }
    lecturer {
      items {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        institutionLecturerId
        owner
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionAdminId
  }
}
subscription OnDeleteInstitution(
  $filter: ModelSubscriptionInstitutionFilterInput
  $admin: String
) {
  onDeleteInstitution(filter: $filter, admin: $admin) {
    name
    location
    pageUrl
    campusMapUrl
    openingTime
    closingTime
    minimumDuration
    lectureremails
    coursecodes
    domains
    admin {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      id
      createdAt
      updatedAt
      adminInstitutionId
      owner
    }
    courses {
      items {
        coursecode
        coursename
        semester
        id
        createdAt
        updatedAt
        institutionCoursesId
      }
      nextToken
    }
    students {
      items {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        institutionStudentsId
        studentInstitutionId
        owner
      }
      nextToken
    }
    lecturer {
      items {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        institutionLecturerId
        owner
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionAdminId
  }
}
subscription OnCreateAdmin(
  $filter: ModelSubscriptionAdminFilterInput
  $owner: String
) {
  onCreateAdmin(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    id
    createdAt
    updatedAt
    adminInstitutionId
    owner
  }
}
subscription OnUpdateAdmin(
  $filter: ModelSubscriptionAdminFilterInput
  $owner: String
) {
  onUpdateAdmin(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    id
    createdAt
    updatedAt
    adminInstitutionId
    owner
  }
}
subscription OnDeleteAdmin(
  $filter: ModelSubscriptionAdminFilterInput
  $owner: String
) {
  onDeleteAdmin(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    id
    createdAt
    updatedAt
    adminInstitutionId
    owner
  }
}
subscription OnCreateLecturer(
  $filter: ModelSubscriptionLecturerFilterInput
  $owner: String
) {
  onCreateLecturer(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    presents {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionLecturerId
    owner
  }
}
subscription OnUpdateLecturer(
  $filter: ModelSubscriptionLecturerFilterInput
  $owner: String
) {
  onUpdateLecturer(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    presents {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionLecturerId
    owner
  }
}
subscription OnDeleteLecturer(
  $filter: ModelSubscriptionLecturerFilterInput
  $owner: String
) {
  onDeleteLecturer(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    presents {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionLecturerId
    owner
  }
}
subscription OnCreatePresent(
  $filter: ModelSubscriptionPresentFilterInput
  $lecturer: String
) {
  onCreatePresent(filter: $filter, lecturer: $lecturer) {
    lecturerId
    courseId
    lecturer {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionLecturerId
      owner
    }
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    coursePresentsId
    presentLecturerId
    presentCourseId
  }
}
subscription OnUpdatePresent(
  $filter: ModelSubscriptionPresentFilterInput
  $lecturer: String
) {
  onUpdatePresent(filter: $filter, lecturer: $lecturer) {
    lecturerId
    courseId
    lecturer {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionLecturerId
      owner
    }
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    coursePresentsId
    presentLecturerId
    presentCourseId
  }
}
subscription OnDeletePresent(
  $filter: ModelSubscriptionPresentFilterInput
  $lecturer: String
) {
  onDeletePresent(filter: $filter, lecturer: $lecturer) {
    lecturerId
    courseId
    lecturer {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionLecturerId
      owner
    }
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    coursePresentsId
    presentLecturerId
    presentCourseId
  }
}
subscription OnCreateStudent(
  $filter: ModelSubscriptionStudentFilterInput
  $owner: String
) {
  onCreateStudent(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    timetable {
      items {
        studentId
        activityId
        id
        createdAt
        updatedAt
        studentTimetableId
        activityTimetableId
        timetableStudentId
        timetableActivityId
      }
      nextToken
    }
    enrollments {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionStudentsId
    studentInstitutionId
    owner
  }
}
subscription OnUpdateStudent(
  $filter: ModelSubscriptionStudentFilterInput
  $owner: String
) {
  onUpdateStudent(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    timetable {
      items {
        studentId
        activityId
        id
        createdAt
        updatedAt
        studentTimetableId
        activityTimetableId
        timetableStudentId
        timetableActivityId
      }
      nextToken
    }
    enrollments {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionStudentsId
    studentInstitutionId
    owner
  }
}
subscription OnDeleteStudent(
  $filter: ModelSubscriptionStudentFilterInput
  $owner: String
) {
  onDeleteStudent(filter: $filter, owner: $owner) {
    institutionId
    firstname
    lastname
    userRole
    email
    institution {
      name
      location
      pageUrl
      campusMapUrl
      openingTime
      closingTime
      minimumDuration
      lectureremails
      coursecodes
      domains
      admin {
        institutionId
        firstname
        lastname
        userRole
        email
        id
        createdAt
        updatedAt
        adminInstitutionId
        owner
      }
      courses {
        nextToken
      }
      students {
        nextToken
      }
      lecturer {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionAdminId
    }
    timetable {
      items {
        studentId
        activityId
        id
        createdAt
        updatedAt
        studentTimetableId
        activityTimetableId
        timetableStudentId
        timetableActivityId
      }
      nextToken
    }
    enrollments {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionStudentsId
    studentInstitutionId
    owner
  }
}
subscription OnCreateEnrollment(
  $filter: ModelSubscriptionEnrollmentFilterInput
  $student: String
) {
  onCreateEnrollment(filter: $filter, student: $student) {
    studentId
    courseId
    year
    student {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      timetable {
        nextToken
      }
      enrollments {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionStudentsId
      studentInstitutionId
      owner
    }
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    lecturerPresentsId
    studentEnrollmentsId
    courseEnrollmentsId
    enrollmentStudentId
    enrollmentCourseId
  }
}
subscription OnUpdateEnrollment(
  $filter: ModelSubscriptionEnrollmentFilterInput
  $student: String
) {
  onUpdateEnrollment(filter: $filter, student: $student) {
    studentId
    courseId
    year
    student {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      timetable {
        nextToken
      }
      enrollments {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionStudentsId
      studentInstitutionId
      owner
    }
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    lecturerPresentsId
    studentEnrollmentsId
    courseEnrollmentsId
    enrollmentStudentId
    enrollmentCourseId
  }
}
subscription OnDeleteEnrollment(
  $filter: ModelSubscriptionEnrollmentFilterInput
  $student: String
) {
  onDeleteEnrollment(filter: $filter, student: $student) {
    studentId
    courseId
    year
    student {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      timetable {
        nextToken
      }
      enrollments {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionStudentsId
      studentInstitutionId
      owner
    }
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    lecturerPresentsId
    studentEnrollmentsId
    courseEnrollmentsId
    enrollmentStudentId
    enrollmentCourseId
  }
}
subscription OnCreateCourse(
  $filter: ModelSubscriptionCourseFilterInput
  $presents: String
) {
  onCreateCourse(filter: $filter, presents: $presents) {
    coursecode
    coursename
    semester
    enrollments {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    activity {
      items {
        courseId
        activityname
        day
        start
        end
        venue
        group
        frequency
        id
        createdAt
        updatedAt
        courseActivityId
        activityCourseId
      }
      nextToken
    }
    announcents {
      items {
        courseId
        description
        start
        end
        date
        venue
        id
        createdAt
        updatedAt
        courseAnnouncentsId
        announcementCourseId
      }
      nextToken
    }
    presents {
      items {
        lecturerId
        courseId
        id
        createdAt
        updatedAt
        coursePresentsId
        presentLecturerId
        presentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionCoursesId
  }
}
subscription OnUpdateCourse(
  $filter: ModelSubscriptionCourseFilterInput
  $presents: String
) {
  onUpdateCourse(filter: $filter, presents: $presents) {
    coursecode
    coursename
    semester
    enrollments {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    activity {
      items {
        courseId
        activityname
        day
        start
        end
        venue
        group
        frequency
        id
        createdAt
        updatedAt
        courseActivityId
        activityCourseId
      }
      nextToken
    }
    announcents {
      items {
        courseId
        description
        start
        end
        date
        venue
        id
        createdAt
        updatedAt
        courseAnnouncentsId
        announcementCourseId
      }
      nextToken
    }
    presents {
      items {
        lecturerId
        courseId
        id
        createdAt
        updatedAt
        coursePresentsId
        presentLecturerId
        presentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionCoursesId
  }
}
subscription OnDeleteCourse(
  $filter: ModelSubscriptionCourseFilterInput
  $presents: String
) {
  onDeleteCourse(filter: $filter, presents: $presents) {
    coursecode
    coursename
    semester
    enrollments {
      items {
        studentId
        courseId
        year
        id
        createdAt
        updatedAt
        lecturerPresentsId
        studentEnrollmentsId
        courseEnrollmentsId
        enrollmentStudentId
        enrollmentCourseId
      }
      nextToken
    }
    activity {
      items {
        courseId
        activityname
        day
        start
        end
        venue
        group
        frequency
        id
        createdAt
        updatedAt
        courseActivityId
        activityCourseId
      }
      nextToken
    }
    announcents {
      items {
        courseId
        description
        start
        end
        date
        venue
        id
        createdAt
        updatedAt
        courseAnnouncentsId
        announcementCourseId
      }
      nextToken
    }
    presents {
      items {
        lecturerId
        courseId
        id
        createdAt
        updatedAt
        coursePresentsId
        presentLecturerId
        presentCourseId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    institutionCoursesId
  }
}
subscription OnCreateTimetable(
  $filter: ModelSubscriptionTimetableFilterInput
  $student: String
) {
  onCreateTimetable(filter: $filter, student: $student) {
    studentId
    activityId
    student {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      timetable {
        nextToken
      }
      enrollments {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionStudentsId
      studentInstitutionId
      owner
    }
    activity {
      courseId
      activityname
      day
      start
      end
      venue
      group
      frequency
      course {
        coursecode
        coursename
        semester
        id
        createdAt
        updatedAt
        institutionCoursesId
      }
      timetable {
        nextToken
      }
      id
      createdAt
      updatedAt
      courseActivityId
      activityCourseId
    }
    id
    createdAt
    updatedAt
    studentTimetableId
    activityTimetableId
    timetableStudentId
    timetableActivityId
  }
}
subscription OnUpdateTimetable(
  $filter: ModelSubscriptionTimetableFilterInput
  $student: String
) {
  onUpdateTimetable(filter: $filter, student: $student) {
    studentId
    activityId
    student {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      timetable {
        nextToken
      }
      enrollments {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionStudentsId
      studentInstitutionId
      owner
    }
    activity {
      courseId
      activityname
      day
      start
      end
      venue
      group
      frequency
      course {
        coursecode
        coursename
        semester
        id
        createdAt
        updatedAt
        institutionCoursesId
      }
      timetable {
        nextToken
      }
      id
      createdAt
      updatedAt
      courseActivityId
      activityCourseId
    }
    id
    createdAt
    updatedAt
    studentTimetableId
    activityTimetableId
    timetableStudentId
    timetableActivityId
  }
}
subscription OnDeleteTimetable(
  $filter: ModelSubscriptionTimetableFilterInput
  $student: String
) {
  onDeleteTimetable(filter: $filter, student: $student) {
    studentId
    activityId
    student {
      institutionId
      firstname
      lastname
      userRole
      email
      institution {
        name
        location
        pageUrl
        campusMapUrl
        openingTime
        closingTime
        minimumDuration
        lectureremails
        coursecodes
        domains
        id
        createdAt
        updatedAt
        institutionAdminId
      }
      timetable {
        nextToken
      }
      enrollments {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionStudentsId
      studentInstitutionId
      owner
    }
    activity {
      courseId
      activityname
      day
      start
      end
      venue
      group
      frequency
      course {
        coursecode
        coursename
        semester
        id
        createdAt
        updatedAt
        institutionCoursesId
      }
      timetable {
        nextToken
      }
      id
      createdAt
      updatedAt
      courseActivityId
      activityCourseId
    }
    id
    createdAt
    updatedAt
    studentTimetableId
    activityTimetableId
    timetableStudentId
    timetableActivityId
  }
}
subscription OnCreateActivity(
  $filter: ModelSubscriptionActivityFilterInput
  $course: String
) {
  onCreateActivity(filter: $filter, course: $course) {
    courseId
    activityname
    day
    start
    end
    venue
    group
    frequency
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    timetable {
      items {
        studentId
        activityId
        id
        createdAt
        updatedAt
        studentTimetableId
        activityTimetableId
        timetableStudentId
        timetableActivityId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    courseActivityId
    activityCourseId
  }
}
subscription OnUpdateActivity(
  $filter: ModelSubscriptionActivityFilterInput
  $course: String
) {
  onUpdateActivity(filter: $filter, course: $course) {
    courseId
    activityname
    day
    start
    end
    venue
    group
    frequency
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    timetable {
      items {
        studentId
        activityId
        id
        createdAt
        updatedAt
        studentTimetableId
        activityTimetableId
        timetableStudentId
        timetableActivityId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    courseActivityId
    activityCourseId
  }
}
subscription OnDeleteActivity(
  $filter: ModelSubscriptionActivityFilterInput
  $course: String
) {
  onDeleteActivity(filter: $filter, course: $course) {
    courseId
    activityname
    day
    start
    end
    venue
    group
    frequency
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    timetable {
      items {
        studentId
        activityId
        id
        createdAt
        updatedAt
        studentTimetableId
        activityTimetableId
        timetableStudentId
        timetableActivityId
      }
      nextToken
    }
    id
    createdAt
    updatedAt
    courseActivityId
    activityCourseId
  }
}
subscription OnCreateAnnouncement(
  $filter: ModelSubscriptionAnnouncementFilterInput
  $course: String
) {
  onCreateAnnouncement(filter: $filter, course: $course) {
    courseId
    description
    start
    end
    date
    venue
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    courseAnnouncentsId
    announcementCourseId
  }
}
subscription OnUpdateAnnouncement(
  $filter: ModelSubscriptionAnnouncementFilterInput
  $course: String
) {
  onUpdateAnnouncement(filter: $filter, course: $course) {
    courseId
    description
    start
    end
    date
    venue
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    courseAnnouncentsId
    announcementCourseId
  }
}
subscription OnDeleteAnnouncement(
  $filter: ModelSubscriptionAnnouncementFilterInput
  $course: String
) {
  onDeleteAnnouncement(filter: $filter, course: $course) {
    courseId
    description
    start
    end
    date
    venue
    course {
      coursecode
      coursename
      semester
      enrollments {
        nextToken
      }
      activity {
        nextToken
      }
      announcents {
        nextToken
      }
      presents {
        nextToken
      }
      id
      createdAt
      updatedAt
      institutionCoursesId
    }
    id
    createdAt
    updatedAt
    courseAnnouncentsId
    announcementCourseId
  }
}
